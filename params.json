{"body":"barristan is a minimal authorization system build in Ruby. barristan is meant to\r\nbe lightweight and framework-agnostic.\r\n\r\n## Installation\r\n\r\nRuby 1.9.2 is required.\r\n\r\nInstall it with rubygems:\r\n\r\n    gem install barristan\r\n\r\nWith bundler, add it to your `Gemfile`:\r\n\r\n``` ruby\r\ngem \"barristan\"\r\n```\r\n\r\nAnd then, run `bundle`.\r\n\r\n## Complete sinatra example\r\n\r\nIn a file called `config.ru`:\r\n\r\n``` ruby\r\nrequire 'sinatra'\r\nrequire 'barristan'\r\n\r\nUser = Struct.new(:role) do\r\n  def admin?\r\n    role == 'admin'\r\n  end\r\nend\r\n\r\nclass Home < Sinatra::Base\r\n  include Barristan::Acl.new {|acl|\r\n    acl.can Home, :index do |app, user|\r\n      user.admin?\r\n    end\r\n  }\r\n\r\n  helpers do\r\n    def current_user\r\n      User.new(params[:role])\r\n    end\r\n  end\r\n\r\n  get '/' do\r\n    guard Home, :index, current_user do |guarded|\r\n      guarded.authorized { 'authorize' }\r\n      guarded.forbidden  { halt 401 }\r\n    end\r\n  end\r\n\r\nend\r\n\r\nrun Home\r\n```\r\n\r\nRun: `rackup`.\r\n\r\nLet's check it with `curl`\r\n\r\n``` shell\r\ncurl -i \"http://localhost:9292\"\r\n# HTTP/1.1 401 Unauthorized\r\ncurl -i \"http://localhost:9292?role=admin\"\r\n# HTTP/1.1 200 OK\r\n```\r\n\r\n## Usage\r\n\r\n``` ruby\r\nclass Controller\r\n  include Barristan::Acl.new {|acl|\r\n    acl.can Post, :index\r\n    acl.can [Post, Comment], :new do |post, user|\r\n      !!user\r\n    end\r\n\r\n    acl.can Post, :update do |post, user|\r\n      post.user == user || user.admin?\r\n    end\r\n  }\r\n\r\n  def update\r\n    guard @post = Post.new, :update, current_user do |guarded|\r\n      guarded.authorized { @post.update }\r\n      guarded.forbidden  { raise  }\r\n    end\r\n  end\r\nend\r\n```","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Barristan","google":"","tagline":"Lightweight and framework-agnostic ruby authorization system."}